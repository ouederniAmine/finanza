generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                String         @unique
  full_name            String         @map("full_name")
  avatar_url           String?        @map("avatar_url")
  phone_number         String?        @map("phone_number")
  date_of_birth        DateTime?      @map("date_of_birth") @db.Date
  preferred_language   String?        @default("tn") @map("preferred_language")
  preferred_currency   String?        @default("TND") @map("preferred_currency")
  cultural_preferences Json?          @default("{}") @map("cultural_preferences")
  onboarding_completed Boolean?       @default(false) @map("onboarding_completed")
  created_at           DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  updated_at           DateTime?      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  budgets              Budget[]
  categories           Category[]
  debts                Debt[]
  notifications        Notification[]
  savings_goals        SavingsGoal[]
  transactions         Transaction[]

  @@index([email], map: "idx_users_email")
  @@map("users")
}

model Category {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String?       @map("user_id") @db.Uuid
  name_tn      String        @map("name_tn")
  name_ar      String?       @map("name_ar")
  name_fr      String?       @map("name_fr")
  name_en      String?       @map("name_en")
  icon         String
  type         String
  color        String        @default("#3B82F6")
  is_default   Boolean?      @default(false) @map("is_default")
  created_at   DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  updated_at   DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  budgets      Budget[]
  user         User?         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transactions Transaction[]

  @@map("categories")
}

model Transaction {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String    @map("user_id") @db.Uuid
  category_id         String?   @map("category_id") @db.Uuid
  amount              Decimal   @db.Decimal
  type                String
  description_tn      String?   @map("description_tn")
  description_ar      String?   @map("description_ar")
  description_fr      String?   @map("description_fr")
  description_en      String?   @map("description_en")
  payment_method      String?   @map("payment_method")
  location            String?
  recurring           Boolean?  @default(false)
  recurring_frequency String?   @map("recurring_frequency")
  tags                String[]  @default([])
  currency            String?   @default("TND")
  transaction_date    DateTime  @default(dbgenerated("CURRENT_DATE")) @map("transaction_date") @db.Date
  created_at          DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updated_at          DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  category            Category? @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([transaction_date], map: "idx_transactions_date")
  @@index([user_id], map: "idx_transactions_user_id")
  @@map("transactions")
}

model Budget {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String    @map("user_id") @db.Uuid
  category_id     String?   @map("category_id") @db.Uuid
  name_tn         String    @map("name_tn")
  name_ar         String?   @map("name_ar")
  name_fr         String?   @map("name_fr")
  name_en         String?   @map("name_en")
  amount          Decimal   @db.Decimal
  period          String
  start_date      DateTime  @map("start_date") @db.Date
  end_date        DateTime  @map("end_date") @db.Date
  currency        String?   @default("TND")
  spent_amount    Decimal?  @default(0) @map("spent_amount") @db.Decimal
  alert_threshold Decimal?  @default(0.80) @map("alert_threshold") @db.Decimal
  is_active       Boolean?  @default(true) @map("is_active")
  created_at      DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  category        Category? @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, is_active], map: "idx_budgets_user_active")
  @@map("budgets")
}

model SavingsGoal {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String    @map("user_id") @db.Uuid
  title_tn            String    @map("title_tn")
  title_ar            String?   @map("title_ar")
  title_fr            String?   @map("title_fr")
  title_en            String?   @map("title_en")
  description_tn      String?   @map("description_tn")
  description_ar      String?   @map("description_ar")
  description_fr      String?   @map("description_fr")
  description_en      String?   @map("description_en")
  target_amount       Decimal   @map("target_amount") @db.Decimal
  current_amount      Decimal?  @default(0) @map("current_amount") @db.Decimal
  target_date         DateTime? @map("target_date") @db.Date
  achievement_date    DateTime? @map("achievement_date") @db.Date
  currency            String?   @default("TND")
  priority            String?   @default("medium")
  icon                String?   @default("ðŸŽ¯")
  color               String?   @default("#10B981")
  is_achieved         Boolean?  @default(false) @map("is_achieved")
  auto_save_amount    Decimal?  @default(0) @map("auto_save_amount") @db.Decimal
  auto_save_frequency String?   @map("auto_save_frequency")
  created_at          DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updated_at          DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_savings_user_id")
  @@map("savings_goals")
}

model Debt {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String    @map("user_id") @db.Uuid
  creditor_name     String    @map("creditor_name")
  debtor_name       String?   @map("debtor_name")
  debt_type         String    @map("debt_type")
  original_amount   Decimal   @map("original_amount") @db.Decimal
  remaining_amount  Decimal   @map("remaining_amount") @db.Decimal
  currency          String?   @default("TND")
  interest_rate     Decimal?  @default(0) @map("interest_rate") @db.Decimal
  payment_frequency String?   @map("payment_frequency")
  next_payment_date DateTime? @map("next_payment_date") @db.Date
  due_date          DateTime? @map("due_date") @db.Date
  settlement_date   DateTime? @map("settlement_date") @db.Date
  minimum_payment   Decimal?  @default(0) @map("minimum_payment") @db.Decimal
  description_tn    String?   @map("description_tn")
  description_ar    String?   @map("description_ar")
  description_fr    String?   @map("description_fr")
  description_en    String?   @map("description_en")
  is_settled        Boolean?  @default(false) @map("is_settled")
  priority          String?   @default("medium")
  created_at        DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_debts_user_id")
  @@map("debts")
}

model Notification {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String    @map("user_id") @db.Uuid
  type            String
  title_tn        String    @map("title_tn")
  title_ar        String?   @map("title_ar")
  title_fr        String?   @map("title_fr")
  title_en        String?   @map("title_en")
  message_tn      String    @map("message_tn")
  message_ar      String?   @map("message_ar")
  message_fr      String?   @map("message_fr")
  message_en      String?   @map("message_en")
  priority        String?   @default("medium")
  is_read         Boolean?  @default(false) @map("is_read")
  action_required Boolean?  @default(false) @map("action_required")
  action_url      String?   @map("action_url")
  scheduled_for   DateTime? @default(now()) @map("scheduled_for") @db.Timestamptz(6)
  sent_at         DateTime? @map("sent_at") @db.Timestamptz(6)
  metadata        Json?     @default("{}")
  created_at      DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  user            User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, is_read], map: "idx_notifications_user_unread")
  @@map("notifications")
}
